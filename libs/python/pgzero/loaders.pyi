"""
This type stub file was generated by pyright.
"""

root = ...
def set_root(path): # -> None:
    """Configure all loaders to load from the given root.

    path may be a file (such as a Python source file), in which case the root
    is set to its containing directory.

    """
    ...

class InvalidCase(Exception):
    """Indicate case errors early so they don't bite cross-platform users."""
    ...


def validate_lowercase(relpath): # -> None:
    ...

def validate_compatible_path(path): # -> None:
    """Validate that the given path can be loaded cross-platform."""
    ...

class ResourceLoader:
    """Abstract resource loader.

    A resource loader is a singleton; resources are loaded from a named
    subdirectory of the global 'root'. The `.load()` method actually loads
    a resource.

    Additionally, attribute access can be used to access and cache resources.
    Dotted paths can be used to traverse directories.

    """
    def __init__(self, subpath) -> None:
        ...
    
    def validate_root(self, name): # -> None:
        ...
    
    @staticmethod
    def cache_key(name, args, kwargs): # -> tuple[Any, Any, tuple[Any, ...]]:
        ...
    
    def load(self, name, *args, **kwargs):
        ...
    
    def __getattr__(self, name): # -> Self:
        ...
    


class ImageLoader(ResourceLoader):
    EXTNS = ...
    TYPE = ...


class UnsupportedFormat(Exception):
    """The resource was not in a supported format."""
    ...


class SoundLoader(ResourceLoader):
    EXTNS = ...
    TYPE = ...


class FontLoader(ResourceLoader):
    EXTNS = ...
    TYPE = ...


images = ...
sounds = ...
fonts = ...
def getfont(fontname=..., fontsize=..., sysfontname=..., bold=..., italic=..., underline=...): # -> Font:
    """Monkey-patch for ptext.getfont().

    This will use our loader and therefore obey our case validation, caching
    and so on.

    """
    ...


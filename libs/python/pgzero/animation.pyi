"""
This type stub file was generated by pyright.
"""

TWEEN_FUNCTIONS = ...
def tweener(f):
    ...

@tweener
def linear(n):
    ...

@tweener
def accelerate(n):
    ...

@tweener
def decelerate(n):
    ...

@tweener
def accel_decel(n):
    ...

@tweener
def in_elastic(n): # -> float:
    ...

@tweener
def out_elastic(n): # -> float:
    ...

@tweener
def in_out_elastic(n): # -> float:
    ...

@tweener
def bounce_end(n):
    ...

@tweener
def bounce_start(n):
    ...

@tweener
def bounce_start_end(n):
    ...

def tween(n, start, end):
    ...

def tween_attr(n, start, end): # -> tuple[Any, ...] | list[Any]:
    ...

class Animation:
    """An animation manager for object attribute animations.

    Each keyword argument given to the Animation on creation (except
    "type" and "duration") will be *tweened* from their current value
    on the object to the target value specified.

    If the value is a list or tuple, then each value inside that will
    be tweened.

    The update() method is automatically scheduled with the clock for
    the duration of the animation.

    """
    animations = ...
    _animation_dict = ...
    def __init__(self, object, tween=..., duration=..., on_finished=..., **targets) -> None:
        ...
    
    def update(self, dt): # -> None:
        ...
    
    def stop(self, complete=...): # -> None:
        """Stop the animation, optionally completing the transition to the final
        property values.

        :param complete: If True, the object will have its targets
            set to their final values for the animation. If not, the
            targets will be set to some value between the start and
            end values.
        """
        ...
    


def animate(object, tween=..., duration=..., on_finished=..., **targets): # -> Animation:
    ...


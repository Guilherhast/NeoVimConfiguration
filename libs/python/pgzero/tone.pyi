"""
This type stub file was generated by pyright.
"""

import numpy as np
from functools import lru_cache

"""Tone generator for Pygame Zero.

This tone generator uses numpy to generate sounds on demand at a given duration
and frequency. These are kept in a LRU cache which in typical applications
will reduce the number of times they need to be regenerated.

Rather than generating plain sine waves, tones are shaped by a basic and
hard-coded `Attack Decay Sustain Release (ADSR) envelope`__, which gives them a
slightly more sonorous timbre:

.. __: https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope

The approach we use here, generating sound samples in memory, is memory hungry
and can introduce pauses when tones are generated. Currently tones generate in
under 1ms on a 2.4GHz i7.

To minimise the extent that pauses affect gameplay, the ``play()`` function
offloads tone generation to a separate thread. Because tones are generated
with numpy operations this should allow at least part of this work to happen
on another CPU core, if present.

"""
__all__ = ('play', 'create')
SAMPLE_RATE = ...
NOTE_PATTERN = ...
A4 = ...
NOTE_VALUE = ...
TWELTH_ROOT = ...
DECAY = ...
MAX_DURATION = ...
cache_lock = ...
note_queue = ...
player_thread = ...
def sine_array_onecycle(hz): # -> Any:
    """Returns a single sin wave for a given frequency."""
    ...

def create(pitch, duration): # -> Sound:
    """Create a tone of a given duration at the given pitch.

    Return a Sound which can be played later.

    """
    ...

class InvalidNote(Exception):
    """The parameters passed were invalid."""
    ...


@lru_cache()
def note_to_hertz(note): # -> float:
    ...

def note_value(note, accidental, octave):
    ...

def validate_note(note): # -> tuple[str | Any, str | Any, int]:
    ...

def play(pitch, duration): # -> None:
    """Plays a tone of a certain length from a note or frequency in hertz.

    Tones have a maximum duration of 4 seconds. This limitation is imposed to
    avoid accidentally creating sounds that take too long to generate and
    require a lot of memory.

    To work around this, create the sounds you want to use up-front with
    create() and hold onto them, perhaps in an array.

    """
    ...

if np is None:
    def play(hz, length):
        ...
    

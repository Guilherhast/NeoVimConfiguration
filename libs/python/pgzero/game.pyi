"""
This type stub file was generated by pyright.
"""

screen = ...
DISPLAY_FLAGS = ...
def exit():
    """Wait for up to a second for all sounds to play out
    and then exit
    """
    ...

def positional_parameters(handler):
    """Get the positional parameters of the given function."""
    ...

class DEFAULTICON:
    """Sentinel indicating that we want to use the default icon."""
    ...


class PGZeroGame:
    def __init__(self, mod) -> None:
        ...
    
    def reinit_screen(self): # -> Literal[False]:
        """Reinitialise the window.

        Return True if the dimensions of the screen changed.

        """
        ...
    
    @staticmethod
    def show_default_icon(): # -> None:
        """Show a default icon loaded from Pygame Zero resources."""
        ...
    
    EVENT_HANDLERS = ...
    def map_buttons(val): # -> set[Any]:
        ...
    
    EVENT_PARAM_MAPPERS = ...
    def load_handlers(self): # -> None:
        ...
    
    def prepare_handler(self, handler): # -> Callable[..., Any | None]:
        """Adapt a pgzero game's raw handler function to take a Pygame Event.

        Returns a one-argument function of the form ``handler(event)``.
        This will ensure that the correct arguments are passed to the raw
        handler based on its argument spec.

        The wrapped handler will also map certain parameter values using
        callables from EVENT_PARAM_MAPPERS; this ensures that the value of
        'button' inside the handler is a real instance of constants.mouse,
        which means (among other things) that it will print as a symbolic value
        rather than a naive integer.

        """
        ...
    
    def dispatch_event(self, event): # -> None:
        ...
    
    def get_update_func(self): # -> Callable[..., Any] | None:
        """Get a one-argument update function.

        If the module defines a function matching ::

            update(dt)

        or ::

            update()

        then this will be called. Otherwise return a no-op function.

        """
        ...
    
    def get_draw_func(self): # -> Callable[[], None]:
        """Get a draw function.

        If no draw function is define, raise an exception.

        """
        ...
    
    def run(self): # -> None:
        """Invoke the main loop, and then clean up."""
        ...
    
    def mainloop(self): # -> None:
        """Run the main loop of Pygame Zero."""
        ...
    



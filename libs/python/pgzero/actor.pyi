"""
This type stub file was generated by pyright.
"""

ANCHORS = ...
def calculate_anchor(value, dim, total): # -> float:
    ...

SYMBOLIC_POSITIONS = ...
POS_TOPLEFT = ...
ANCHOR_CENTER = ...
def transform_anchor(ax, ay, w, h, angle): # -> tuple[Any, Any]:
    """Transform anchor based upon a rotation of a surface of size w x h."""
    ...

class Actor:
    EXPECTED_INIT_KWARGS = ...
    DELEGATED_ATTRIBUTES = ...
    _anchor_value = ...
    _angle = ...
    def __init__(self, image, pos=..., anchor=..., **kwargs) -> None:
        ...
    
    def __getattr__(self, attr): # -> Any:
        ...
    
    def __setattr__(self, attr, value): # -> None:
        """Assign rect attributes to the underlying rect."""
        ...
    
    def __iter__(self): # -> Any:
        ...
    
    @property
    def anchor(self): # -> tuple[Literal[0], Literal[0]]:
        ...
    
    @anchor.setter
    def anchor(self, val): # -> None:
        ...
    
    @property
    def angle(self): # -> float:
        ...
    
    @angle.setter
    def angle(self, angle): # -> None:
        ...
    
    @property
    def pos(self): # -> tuple[Any | float | int, Any | float | int]:
        ...
    
    @pos.setter
    def pos(self, pos): # -> None:
        ...
    
    @property
    def x(self):
        ...
    
    @x.setter
    def x(self, px): # -> None:
        ...
    
    @property
    def y(self):
        ...
    
    @y.setter
    def y(self, py): # -> None:
        ...
    
    @property
    def image(self):
        ...
    
    @image.setter
    def image(self, image): # -> None:
        ...
    
    def draw(self): # -> None:
        ...
    
    def angle_to(self, target): # -> float:
        """Return the angle from this actors position to target, in degrees."""
        ...
    
    def distance_to(self, target): # -> float:
        """Return the distance from this actor's pos to target, in pixels."""
        ...
    



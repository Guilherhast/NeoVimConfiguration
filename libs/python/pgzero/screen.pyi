"""
This type stub file was generated by pyright.
"""

def round_pos(pos): # -> tuple[Any, Any]:
    """Round a tuple position so it can be used for drawing."""
    ...

def make_color(arg): # -> tuple[Any, ...] | tuple[int, ...]:
    ...

class SurfacePainter:
    """Interface to pygame.draw that is bound to a surface."""
    def __init__(self, screen) -> None:
        ...
    
    def line(self, start, end, color): # -> None:
        """Draw a line from start to end."""
        ...
    
    def circle(self, pos, radius, color): # -> None:
        """Draw a circle."""
        ...
    
    def filled_circle(self, pos, radius, color): # -> None:
        """Draw a filled circle."""
        ...
    
    def rect(self, rect, color): # -> None:
        """Draw a rectangle."""
        ...
    
    def filled_rect(self, rect, color): # -> None:
        """Draw a filled rectangle."""
        ...
    
    def text(self, *args, **kwargs): # -> None:
        """Draw text to the screen."""
        ...
    
    def textbox(self, *args, **kwargs): # -> None:
        """Draw text to the screen, wrapped to fit a box"""
        ...
    


class Screen:
    """Interface to the screen."""
    def __init__(self, surface) -> None:
        ...
    
    def clear(self): # -> None:
        """Clear the screen to black."""
        ...
    
    def fill(self, color): # -> None:
        """Fill the screen with a colour."""
        ...
    
    def blit(self, image, pos): # -> None:
        """Draw a sprite onto the screen.

        "blit" is an archaic name for this operation, but one that is is still
        frequently used, for example in Pygame. See the `Wikipedia article`__
        for more about the etymology of the term.

        .. __: http://en.wikipedia.org/wiki/Bit_blit

        :param image: A Surface or the name of an image object to load.
        :param pos: The coordinates at which the top-left corner of the sprite
                    will be positioned. This may be given as a pair of
                    coordinates or as a Rect. If a Rect is given the sprite
                    will be drawn at ``rect.topleft``.

        """
        ...
    
    @property
    def draw(self): # -> SurfacePainter:
        ...
    



"""
This type stub file was generated by pyright.
"""

import pygame.rect

class Rect(pygame.rect.Rect):
    __slots__ = ...
    VALID_ATTRIBUTES = ...
    def __setattr__(self, key, value): # -> None:
        ...
    


class NoIntersect(Exception):
    ...


class ZRect:
    """ZRect

    This is a Python implementation of the pygame Rect class. Its raison
    d'Ãªtre is to allow the coordinates to be floating point. All pygame
    functions which require a rect allow for an object with a "rect"
    attribute and whose coordinates will be converted to integers implictly.

    All functions which require a dict will use the flexible constructor
    to convert from: this (or a subclass); a Pygame Rect; a 4-tuple or a
    pair of 2-tuples. In addition, they'll recognise any object which has
    an (optionally callable) .rect attribute whose value will be used instead.
    """
    _item_mapping = ...
    def __init__(self, *args) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __reduce__(self): # -> tuple[type[Self], tuple[int | Any, Any, Any | int, Any | int]]:
        ...
    
    def copy(self): # -> Self:
        ...
    
    __copy__ = ...
    def __len__(self): # -> Literal[4]:
        ...
    
    def __getitem__(self, item): # -> Any:
        ...
    
    def __setitem__(self, item, value): # -> None:
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    def __iter__(self): # -> Generator[int | Any, Any, None]:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, *other) -> bool:
        ...
    
    def __ne__(self, *other) -> bool:
        ...
    
    def __lt__(self, *other) -> bool:
        ...
    
    def __gt__(self, *other) -> bool:
        ...
    
    def __le__(self, *other) -> bool:
        ...
    
    def __ge__(self, *other) -> bool:
        ...
    
    def __contains__(self, other): # -> Literal[False]:
        """Test whether a point (x, y) or another rectangle
        (anything accepted by ZRect) is contained within this ZRect
        """
        ...
    
    width = ...
    height = ...
    top = ...
    left = ...
    right = ...
    bottom = ...
    centerx = ...
    centery = ...
    topleft = ...
    topright = ...
    bottomleft = ...
    bottomright = ...
    midtop = ...
    midleft = ...
    midbottom = ...
    midright = ...
    center = ...
    size = ...
    def move(self, x, y): # -> Self:
        ...
    
    def move_ip(self, x, y): # -> None:
        ...
    
    def inflate(self, x, y): # -> Self:
        ...
    
    def inflate_ip(self, x, y): # -> None:
        ...
    
    def clamp(self, *other): # -> Self:
        ...
    
    def clamp_ip(self, *other): # -> None:
        ...
    
    def clip(self, *other): # -> Self:
        ...
    
    def clip_ip(self, *other): # -> None:
        ...
    
    def union(self, *other): # -> Self:
        ...
    
    def union_ip(self, *other): # -> None:
        ...
    
    def unionall(self, others): # -> Self:
        ...
    
    def unionall_ip(self, others): # -> None:
        ...
    
    def fit(self, *other): # -> Self:
        ...
    
    def normalize(self): # -> None:
        ...
    
    def contains(self, *other): # -> Literal[False]:
        ...
    
    def collidepoint(self, *args):
        ...
    
    def colliderect(self, *other): # -> Literal[False]:
        ...
    
    def collidelist(self, others): # -> int:
        ...
    
    def collidelistall(self, others): # -> list[int]:
        ...
    
    def collidedict(self, dict, use_values=...): # -> tuple[Any, Any] | None:
        ...
    
    def collidedictall(self, dict, use_values=...): # -> list[tuple[Any, Any]]:
        ...
    


RECT_CLASSES = ...
